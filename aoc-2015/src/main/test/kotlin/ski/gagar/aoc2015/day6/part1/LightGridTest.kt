package ski.gagar.aoc2015.day6.part1

import org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.api.Test
import java.lang.IllegalArgumentException

internal class LightGridTest {
    fun checkOutOfBounds(width: Int, height: Int, coordinatesConsumer: (Int, Int) -> Unit) {
        assertThrows(IllegalArgumentException::class.java) {
            coordinatesConsumer(-1, 0)
        }
        assertThrows(IllegalArgumentException::class.java) {
            coordinatesConsumer(0, -1)
        }
        assertThrows(IllegalArgumentException::class.java) {
            coordinatesConsumer(0, height + 1)
        }
        assertThrows(IllegalArgumentException::class.java) {
            coordinatesConsumer(width + 1, 0)
        }

        coordinatesConsumer(width - 1, height - 1)
        coordinatesConsumer(0, 0)
    }

    private val Boolean.onOff
        get() = if (this) "on" else "off"

    fun assertGrid(expectedState: String, grid: LightGrid) {
        val widths = expectedState.lineSequence().map { it.length }.toSet()
        if (widths.size != 1) {
            throw IllegalArgumentException("Expected state supposed to be rectangular")
        }
        val width = widths.first()
        val height = expectedState.lines().size

        assertEquals(width, grid.width)
        assertEquals(height, grid.height)

        for ((y, line) in expectedState.lineSequence().withIndex()) {
            for ((x, char) in line.withIndex()) {
                val isOn = grid.isOn(x, y)
                when (char) {
                    'X' -> assertTrue(isOn, "Bulb ($x, $y) is ${isOn.onOff} but expected to be on")
                    '.' -> assertFalse(isOn, "Bulb ($x, $y) is ${isOn.onOff} but expected to be off")
                    else -> throw IllegalArgumentException("Bad expected state")
                }
            }
        }
    }

    @Test
    fun bounds() {
        val grid = LightGrid(10, 10)
        checkOutOfBounds(10, 10) { x, y ->
            grid.turnOn(x, y)
        }
        checkOutOfBounds(10, 10) { x, y ->
            grid.turnOff(x, y)
        }
        checkOutOfBounds(10, 10) { x, y ->
            grid.toggle(x, y)
        }
        checkOutOfBounds(10, 10) { x, y ->
            grid.isOn(x, y)
        }
    }

    @Test
    fun singleLight() {
        val grid = LightGrid(10, 10)
        assertGrid("""
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........""".trimIndent(), grid)
        grid.turnOn(4, 8)
        assertGrid("""
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ....X.....
            ..........""".trimIndent(), grid)
        grid.turnOff(4, 8)
        assertGrid("""
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........""".trimIndent(), grid)
        grid.toggle(4, 8)
        assertGrid("""
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ....X.....
            ..........""".trimIndent(), grid)
        grid.toggle(4, 8)
        assertGrid("""
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........""".trimIndent(), grid)
    }

    @Test
    fun initiallyOff() {
        val grid = LightGrid(10, 10)
        assertGrid("""
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........""".trimIndent(), grid)
    }

    @Test
    fun bulkComplex() {
        val grid = LightGrid(10, 10)
        assertGrid("""
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........""".trimIndent(), grid)
        grid.turnOn(4..6, 5..7)
        assertGrid("""
            ..........
            ..........
            ..........
            ..........
            ..........
            ....XXX...
            ....XXX...
            ....XXX...
            ..........
            ..........""".trimIndent(), grid)
        assertEquals(9, grid.onCount)

        grid.turnOn(0 until 10, 0..2)
        assertGrid("""
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            ..........
            ..........
            ....XXX...
            ....XXX...
            ....XXX...
            ..........
            ..........""".trimIndent(), grid)
        assertEquals(39, grid.onCount)

        grid.turnOff(0 until 10, 0..0)
        assertGrid("""
            ..........
            XXXXXXXXXX
            XXXXXXXXXX
            ..........
            ..........
            ....XXX...
            ....XXX...
            ....XXX...
            ..........
            ..........""".trimIndent(), grid)

        assertEquals(29, grid.onCount)

        grid.turnOff(7..8, 1..2)
        assertGrid("""
            ..........
            XXXXXXX..X
            XXXXXXX..X
            ..........
            ..........
            ....XXX...
            ....XXX...
            ....XXX...
            ..........
            ..........""".trimIndent(), grid)

        assertEquals(25, grid.onCount)

        grid.toggle(0 until 10, 1..3)
        assertGrid("""
            ..........
            .......XX.
            .......XX.
            XXXXXXXXXX
            ..........
            ....XXX...
            ....XXX...
            ....XXX...
            ..........
            ..........""".trimIndent(), grid)
        assertEquals(23, grid.onCount)

        grid.toggle(3..7, 1..5)
        assertGrid("""
            ..........
            ...XXXX.X.
            ...XXXX.X.
            XXX.....XX
            ...XXXXX..
            ...X...X..
            ....XXX...
            ....XXX...
            ..........
            ..........""".trimIndent(), grid)
        assertEquals(28, grid.onCount)
    }

    @Test
    fun offStaysOff() {
        val grid = LightGrid(10, 10)
        assertGrid("""
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........""".trimIndent(), grid)
        grid.turnOff(4, 8)
        assertGrid("""
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........""".trimIndent(), grid)
        grid.turnOff(0 until 10, 3..5)
        assertGrid("""
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........""".trimIndent(), grid)

        grid.turnOff(2..6, 3..5)
        assertGrid("""
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........
            ..........""".trimIndent(), grid)
    }

    @Test
    fun onStaysOn() {
        val grid = LightGrid(10, 10)
        grid.turnOn(0 until 10, 0 until 10)
        assertGrid("""
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX""".trimIndent(), grid)
        grid.turnOn(4, 8)
        assertGrid("""
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX""".trimIndent(), grid)
        grid.turnOn(0 until 10, 3..5)
        assertGrid("""
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX""".trimIndent(), grid)

        grid.turnOn(2..6, 3..5)
        assertGrid("""
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX
            XXXXXXXXXX""".trimIndent(), grid)
    }
}
